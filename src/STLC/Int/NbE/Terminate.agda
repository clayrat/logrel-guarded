{-# OPTIONS --guarded #-}
module STLC.Int.NbE.Terminate where

open import Prelude hiding (apply)
open import Data.Unit
open import Later
open import Guarded.Partial
open import Guarded.Partial.Converges

open import STLC.Ty
open import STLC.Int.TyTerm
open import STLC.Int.NbE.OPE
open import STLC.Int.NbE.Norm

mutual
  Vโฆ_โง : โ {ฮ} โ (A : Ty) โ Val ฮ A โ ๐ฐ
  Vโฆ ๐ โง           (v-ne w) = nereadback w โ
  Vโฆ_โง {ฮ} (A โ B)  f       = โ {ฮ} (ฮท : ฮ โค ฮ) (u : Val ฮ A) โ Vโฆ A โง u โ Cโฆ B โง (apply (valโค ฮท f) u)

  Cโฆ_โง : โ {ฮ} โ (A : Ty) โ Part (Val ฮ A) โ ๐ฐ
  Cโฆ_โง {ฮ} A p = ฮฃ[ v ๊ Val ฮ A ] (p โแต v) ร Vโฆ A โง v

Eโฆ_โง : โ {ฮ} ฮ โ Env ฮ ฮ โ ๐ฐ
Eโฆ โ โง      ฮต       = โค
Eโฆ ฮ ๏น A โง (e ใ v) = Eโฆ ฮ โง e ร Vโฆ A โง v

mutual
  valโค-id : โ {ฮ A} โ (v : Val ฮ A) โ valโค idโค v ๏ผ v
  valโค-id (v-ฦ t e) = ap (v-ฦ t) (envโค-id e)
  valโค-id (v-ne n)  = ap v-ne (nevโค-id n)

  envโค-id : โ {ฮ ฮ} โ (ฯ : Env ฮ ฮ) โ envโค idโค ฯ ๏ผ ฯ
  envโค-id  ฮต       = refl
  envโค-id (ฯ ใ v) = apยฒ _ใ_ (envโค-id ฯ) (valโค-id v)

  nevโค-id : โ {ฮ A} โ (t : Ne Val ฮ A) โ nevโค idโค t ๏ผ t
  nevโค-id (ne-` x)   = refl
  nevโค-id (ne-ยท n v) = apยฒ ne-ยท (nevโค-id n) (valโค-id v)

varโค-โ : โ {ฮ ฮ ฮ A}
       โ (ฮท : ฮ โค ฮ) (ฮธ : ฮ โค ฮ) (x : ฮ โ A)
       โ varโค ฮท (varโค ฮธ x) ๏ผ varโค (ฮท โ ฮธ) x
varโค-โ  idโค       ฮธ         x        = refl
varโค-โ (weakโค ฮท)  ฮธ         x        = ap there (varโค-โ ฮท ฮธ x)
varโค-โ (liftโค ฮท)  idโค       x        = refl
varโค-โ (liftโค ฮท) (weakโค ฮธ)  x        = ap there (varโค-โ ฮท ฮธ x)
varโค-โ (liftโค ฮท) (liftโค ฮธ)  here     = refl
varโค-โ (liftโค ฮท) (liftโค ฮธ) (there x) = ap there (varโค-โ ฮท ฮธ x)

mutual
  valโค-โ : โ {ฮ ฮ ฮ A}
         โ (ฮท : ฮ โค ฮ) (ฮธ : ฮ โค ฮ) (v : Val ฮ A)
         โ valโค ฮท (valโค ฮธ v) ๏ผ valโค (ฮท โ ฮธ) v
  valโค-โ ฮท ฮธ (v-ฦ t e) = ap (v-ฦ t) (envโค-โ ฮท ฮธ e)
  valโค-โ ฮท ฮธ (v-ne n)  = ap v-ne (nevโค-โ ฮท ฮธ n)

  envโค-โ : โ {ฮ ฮ ฮ ฮ}
         โ (ฮท : ฮ โค ฮ) (ฮธ : ฮ โค ฮ) (ฯ : Env ฮ ฮ)
         โ envโค ฮท (envโค ฮธ ฯ) ๏ผ envโค (ฮท โ ฮธ) ฯ
  envโค-โ ฮท ฮธ  ฮต       = refl
  envโค-โ ฮท ฮธ (ฯ ใ v) = apยฒ _ใ_ (envโค-โ ฮท ฮธ ฯ) (valโค-โ ฮท ฮธ v)

  nevโค-โ : โ {ฮ ฮ ฮ A}
         โ (ฮท : ฮ โค ฮ) (ฮธ : ฮ โค ฮ) (t : Ne Val ฮ A)
         โ nevโค ฮท (nevโค ฮธ t) ๏ผ nevโค (ฮท โ ฮธ) t
  nevโค-โ ฮท ฮธ (ne-` x)   = ap ne-` (varโค-โ ฮท ฮธ x)
  nevโค-โ ฮท ฮธ (ne-ยท n v) = apยฒ ne-ยท (nevโค-โ ฮท ฮธ n) (valโค-โ ฮท ฮธ v)

lookupโค : โ {ฮ ฮ ฮ A} (x : ฮ โ A) (ฯ : Env ฮ ฮ) (ฮท : ฮ โค ฮ)
        โ valโค ฮท (lookup x ฯ) ๏ผ lookup x (envโค ฮท ฯ)
lookupโค here      (ฯ ใ v) ฮท = refl
lookupโค (there x) (ฯ ใ v) ฮท = lookupโค x ฯ ฮท

mutual
  evalโค-body : โน (โ ฮ ฮ ฮ A โ (t : ฮ โข A) (ฯ : Env ฮ ฮ) (ฮท : ฮ โค ฮ) โ mapแต (valโค ฮท) (eval t ฯ) ๏ผ eval t (envโค ฮท ฯ))
             โ โ ฮ ฮ ฮ A โ (t : ฮ โข A) (ฯ : Env ฮ ฮ) (ฮท : ฮ โค ฮ) โ mapแต (valโค ฮท) (eval t ฯ) ๏ผ eval t (envโค ฮท ฯ)
  evalโค-body eโน ฮ ฮ ฮ A        (` x)   ฯ ฮท = ap now (lookupโค x ฯ ฮท)
  evalโค-body eโน ฮ ฮ ฮ .(_ โ _) (ฦ M)   ฯ ฮท = refl
  evalโค-body eโน ฮ ฮ ฮ A        (M ยท N) ฯ ฮท =
    mapแต (valโค ฮท) (eval (M ยท N) ฯ)
      ๏ผโจโฉ
    mapแต (valโค ฮท) (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป v โ apply f v)
      ๏ผโจ sym (bind-map (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป v โ apply f v)) โฉ
    (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป v โ apply f v) >>=แต (now โ valโค ฮท)
      ๏ผโจ bind-assoc (eval M ฯ) โฉ
    (eval M ฯ >>=แต ฮป f โ (eval N ฯ >>=แต ฮป v โ apply f v) >>=แต (now โ valโค ฮท))
      ๏ผโจ ap (eval M ฯ >>=แต_) (fun-ext ฮป f โ bind-assoc (eval N ฯ)) โฉ
    (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป x โ apply f x >>=แต (now โ valโค ฮท))
      ๏ผโจ ap (eval M ฯ >>=แต_) (fun-ext ฮป f โ ap (eval N ฯ >>=แต_) (fun-ext ฮป x โ bind-map (apply f x))) โฉ
    (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป x โ mapแต (valโค ฮท) (apply f x))
      ๏ผโจ ap (eval M ฯ >>=แต_) (fun-ext ฮป f โ ap (eval N ฯ >>=แต_) (fun-ext ฮป x โ applyโค-body f x ฮท eโน)) โฉ
    (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป x โ apply (valโค ฮท f) (valโค ฮท x))
      ๏ผโจโฉ
    (eval M ฯ >>=แต ฮป f โ eval N ฯ >>=แต ฮป x โ now (valโค ฮท x) >>=แต ฮป v โ apply (valโค ฮท f) v)
      ๏ผโจ ap (eval M ฯ >>=แต_) (fun-ext ฮป f โ sym (bind-assoc (eval N ฯ))) โฉ
    (eval M ฯ >>=แต ฮป f โ (eval N ฯ >>=แต ฮป x โ now (valโค ฮท x)) >>=แต ฮป v โ apply (valโค ฮท f) v)
      ๏ผโจ ap (eval M ฯ >>=แต_) (fun-ext ฮป f โ ap (_>>=แต (ฮป v โ apply (valโค ฮท f) v)) (bind-map (eval N ฯ))) โฉ
    (eval M ฯ >>=แต ฮป f โ (mapแต (valโค ฮท) (eval N ฯ)) >>=แต ฮป v โ apply (valโค ฮท f) v)
      ๏ผโจ ap (eval M ฯ >>=แต_) (fun-ext ฮป f โ ap (_>>=แต (ฮป v โ apply (valโค ฮท f) v)) (evalโค-body eโน ฮ ฮ ฮ _ N ฯ ฮท)) โฉ
    (eval M ฯ >>=แต ฮป f โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply (valโค ฮท f) v)
      ๏ผโจโฉ
    (eval M ฯ >>=แต ฮป f โ now (valโค ฮท f) >>=แต ฮป fโฒ โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply fโฒ v)
      ๏ผโจ sym (bind-assoc (eval M ฯ)) โฉ
    ((eval M ฯ >>=แต ฮป f โ now (valโค ฮท f)) >>=แต ฮป fโฒ โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply fโฒ v)
      ๏ผโจ ap (_>>=แต (ฮป fโฒ โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply fโฒ v)) (bind-map (eval M ฯ)) โฉ
    (mapแต (valโค ฮท) (eval M ฯ) >>=แต ฮป f โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply f v)
      ๏ผโจ ap (_>>=แต (ฮป fโฒ โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply fโฒ v)) (evalโค-body eโน ฮ ฮ ฮ (_ โ A) M ฯ ฮท) โฉ
    (eval M (envโค ฮท ฯ) >>=แต ฮป f โ eval N (envโค ฮท ฯ) >>=แต ฮป v โ apply f v)
      ๏ผโจโฉ
    eval (M ยท N) (envโค ฮท ฯ)
      โ

  applyโค-body : โ {ฮ ฮ A B} (f : Val ฮ (A โ B)) (v : Val ฮ A) (ฮท : ฮ โค ฮ)
              โ โน (โ ฮ ฮ ฮ A โ (t : ฮ โข A) (ฯ : Env ฮ ฮ) (ฮท : ฮ โค ฮ) โ mapแต (valโค ฮท) (eval t ฯ) ๏ผ eval t (envโค ฮท ฯ))
              โ mapแต (valโค ฮท) (apply f v) ๏ผ apply (valโค ฮท f) (valโค ฮท v)
  applyโค-body (v-ฦ t e) v ฮท eโน = ap later (betaโค-body t e v ฮท eโน)
  applyโค-body (v-ne n)  v ฮท eโน = refl

  betaโค-body : โ {ฮ ฮ ฮ A B} (t : (ฮ ๏น A) โข B)(ฯ : Env ฮ ฮ) (v : Val ฮ A) (ฮท : ฮ โค ฮ)
             โ โน (โ ฮ ฮ ฮ A โ (t : ฮ โข A) (ฯ : Env ฮ ฮ) (ฮท : ฮ โค ฮ) โ mapแต (valโค ฮท) (eval t ฯ) ๏ผ eval t (envโค ฮท ฯ))
             โ (โนmap (mapแต (valโค ฮท)) (beta t ฯ v)) ๏ผ beta t (envโค ฮท ฯ) (valโค ฮท v)
  betaโค-body {ฮ} {ฮ} {ฮ} {A} {B} t ฯ v ฮท eโน = โน-ext ฮป ฮฑ โ
    ap (mapแต (valโค ฮท)) (ฮป i โ pfix eval-body i ฮฑ (ฮ ๏น A) ฮ B t (ฯ ใ v))
    โ eโน ฮฑ (ฮ ๏น A) ฮ ฮ B t (ฯ ใ v) ฮท
    โ ฮป i โ pfix eval-body (~ i) ฮฑ (ฮ ๏น A) ฮ B t (envโค ฮท ฯ ใ valโค ฮท v)

-- TODO unused?
evalโค : โ {ฮ ฮ ฮ A} (t : ฮ โข A) (ฯ : Env ฮ ฮ) (ฮท : ฮ โค ฮ)
      โ mapแต (valโค ฮท) (eval t ฯ) ๏ผ eval t (envโค ฮท ฯ)
evalโค {ฮ} {ฮ} {ฮ} {A} = fix evalโค-body ฮ ฮ ฮ A

applyโค : โ {ฮ ฮ A B} (f : Val ฮ (A โ B)) (v : Val ฮ A) (ฮท : ฮ โค ฮ)
       โ mapแต (valโค ฮท) (apply f v) ๏ผ apply (valโค ฮท f) (valโค ฮท v)
applyโค f v ฮท = applyโค-body f v ฮท (dfix evalโค-body)
