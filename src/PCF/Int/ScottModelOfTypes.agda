{-# OPTIONS --guarded #-}
module PCF.Int.ScottModelOfTypes where

open import Prelude
open import Data.Nat

open import Later
open import Guarded.Partial

open import PCF.Ty
open import PCF.Int.TyTerm

private variable
  РёЊ : Level
  T : Ty
  A : ­Юњ░ РёЊ

­Юњ»РЪд_РЪД : Ty Рєњ ­Юњ░
­Юњ»РЪд ­ЮЊЮ РЪД    = Part РёЋ
­Юњ»РЪд S РЄњ T РЪД = ­Юњ»РЪд S РЪД Рєњ ­Юњ»РЪд T РЪД

╬И : Рќ╣Alg (­Юњ»РЪд T РЪД)
╬И {T = ­ЮЊЮ} xРќ╣     = later xРќ╣
╬И {S РЄњ T}  tfРќ╣ ts = ╬И (tfРќ╣ РіЏ next ts)

╬┤ : ­Юњ»РЪд T РЪД Рєњ ­Юњ»РЪд T РЪД
╬┤ = ╬И Рѕў next

╬┤-$ : Рѕђ {k S T}
      {f : ­Юњ»РЪд S РЄњ T РЪД}
      {s : ­Юњ»РЪд S РЪД}
    Рєњ (iter k ╬┤ f) s №╝Ю iter k ╬┤ (f s)
╬┤-$ {k = zero}  = refl
╬┤-$ {k = suc k} = ap ╬┤ (╬┤-$ {k = k})

-- TODO move to partiality
╬┤рхќ-map : Рѕђ {B : ­Юњ░ РёЊ} {f : A Рєњ B} {k : РёЋ} {x : Part A}
       Рєњ mapрхќ f (iter k ╬┤рхќ x) №╝Ю iter k ╬┤рхќ (mapрхќ f x)
╬┤рхќ-map {k = zero}  = refl
╬┤рхќ-map {k = suc k} = ap ╬┤рхќ (╬┤рхќ-map {k = k})

^-body : (A Рєњ ­Юњ»РЪд T РЪД)
       Рєњ Рќ╣ (Part A Рєњ ­Юњ»РЪд T РЪД)
       Рєњ Part A Рєњ ­Юњ»РЪд T РЪД
^-body f f^Рќ╣ (now x)    = f x
^-body f f^Рќ╣ (later pРќ╣) = ╬И (f^Рќ╣ РіЏ pРќ╣)

_^ : (A Рєњ ­Юњ»РЪд T РЪД)
   Рєњ Part A Рєњ ­Юњ»РЪд T РЪД
(f ^) = fix (^-body f)
